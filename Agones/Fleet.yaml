apiVersion: "agones.dev/v1"
kind: Fleet
# Fleet Metadata
# https://v1-30.docs.kubernetes.io/docs/reference/generated/kubernetes-api/v1.30/#objectmeta-v1-meta
metadata:
  name: pigeon-project-fleet
spec:
  # the number of GameServers to keep Ready or Allocated in this Fleet
  replicas: 2
  # defines how GameServers are organised across the cluster.
  # Options include:
  # "Packed" (default) is aimed at dynamic Kubernetes clusters, such as cloud providers, wherein we want to bin pack
  # resources
  # "Distributed" is aimed at static Kubernetes clusters, wherein we want to distribute resources across the entire
  # cluster
  scheduling: Packed
  # a GameServer template - see:
  # https://agones.dev/site/docs/reference/gameserver/ for all the options
  strategy:
    # The replacement strategy for when the GameServer template is changed. Default option is "RollingUpdate",
    # "RollingUpdate" will increment by maxSurge value on each iteration, while decrementing by maxUnavailable on each
    # iteration, until all GameServers have been switched from one version to another.
    # "Recreate" terminates all non-allocated GameServers, and starts up a new set with the new details to replace them.
    type: RollingUpdate
    # Only relevant when `type: RollingUpdate`
    rollingUpdate:
      # the amount to increment the new GameServers by. Defaults to 25%
      maxSurge: 25%
      # the amount to decrements GameServers by. Defaults to 25%
      maxUnavailable: 25%
#  # Labels and/or Annotations to apply to overflowing GameServers when the number of Allocated GameServers is more
#  # than the desired replicas on the underlying `GameServerSet`
#  allocationOverflow:
#    labels:
#      mykey: myvalue
#      version: "" # empty an existing label value
#    annotations:
#      otherkey: setthisvalue
  # [Stage:Beta]
  # [FeatureFlag:CountsAndLists]
  # Which gameservers in the Fleet are most important to keep around - impacts scale down logic.
  # Now in Beta, and enabled by default
  priorities:
    - type: List # Sort by a “List”
      key: players # The name of the List. No impact if no GameServer found.
      order: Ascending # Default is "Ascending" so smaller available capacity will be removed first on down scaling.
  template:
    # GameServer metadata
    metadata:
      generateName: pigeon-project-
    spec:
      #  # if there is more than one container, specify which one is the game server
      #  container: example-server
      # Array of ports that can be exposed as direct connections to the game server container
      ports:
        # name is a descriptive name for the port
        - name: default
          # [Stage:Alpha]
          # [FeatureFlag:PortRanges]
          # range is the optional port range name from which to select a port when using a 'Dynamic' or 'Passthrough' port policy.
          # Defaults to 'default'.
          range: default
          # portPolicy has four options:
          # - "Dynamic" (default) the system allocates a free hostPort for the gameserver, for game clients to connect to
          # - "Static", user defines the hostPort that the game client will connect to. Then onus is on the user to ensure that the
          # port is available. When static is the policy specified, `hostPort` is required to be populated
          # - "Passthrough" dynamically sets the `containerPort` to the same value as the dynamically selected hostPort.
          #      This will mean that users will need to lookup what port has been opened through the server side SDK.
          # [Stage:Alpha]
          # [FeatureFlag:PortPolicyNone]
          # - "None" means the `hostPort` is ignored and if defined, the `containerPort` (optional) is used to set the port on the GameServer instance.
          portPolicy: Dynamic
          #      # The name of the container to open the port on. Defaults to the game server container if omitted or empty.
          #      container: simple-game-server
          # the port that is being opened on the game server process
          containerPort: 7000
          # the port exposed on the host, only required when `portPolicy` is "Static". Overwritten when portPolicy is "Dynamic".
          # hostPort: 7777
          # protocol being used. Defaults to UDP. TCP and TCPUDP are other options
          protocol: UDP
      # Health checking for the running game server
      health:
        # Disable health checking. defaults to false, but can be set to true
        disabled: false
        # Number of seconds after the container has started before health check is initiated. Defaults to 5 seconds
        initialDelaySeconds: 5
        # If the `Health()` function doesn't get called at least once every period (seconds), then
        # the game server is not healthy. Defaults to 5
        periodSeconds: 5
        # Minimum consecutive failures for the health probe to be considered failed after having succeeded.
        # Defaults to 3. Minimum value is 1
        failureThreshold: 3
      # Parameters for game server sidecar
      sdkServer:
        # sdkServer log level parameter has three options:
        #  - "Info" (default) The SDK server will output all messages except for debug messages
        #  - "Debug" The SDK server will output all messages including debug messages
        #  - "Error" The SDK server will only output error messages
        #  - "Trace" The SDK server will output all messages, including detailed tracing information
        logLevel: Info
        # grpcPort and httpPort control what ports the sdkserver listens on.
        # Starting with Agones 1.2 the default grpcPort is 9357 and the default
        # httpPort is 9358. In earlier releases, the defaults were 59357 and 59358
        # respectively but as these were in the ephemeral port range they could
        # conflict with other TCP connections.
        grpcPort: 9357
        httpPort: 9358
      # [Stage:Alpha]
      # [FeatureFlag:PlayerTracking]
      # Players provides the configuration for player tracking features.
      # Commented out since Alpha, and disabled by default
      # players:
      #  # set this GameServer's initial player capacity
      #   initialCapacity: 10
      #
      # [Stage:Beta]
      # [FeatureFlag:CountsAndLists]
      # Counts and Lists provides the configuration for generic (player, room, session, etc.) tracking features.
      # Now in Beta, and enabled by default
      counters:  # counters are int64 counters that can be incremented and decremented by set amounts. Keys must be declared at GameServer creation time.
      lists:  # lists are lists of values stored against this GameServer that can be added and deleted from. Keys must be declared at GameServer creation time.
        players:  # an empty list, with a capacity set to 10.
          capacity: 5  # capacity value, defaults to 1000.
      # Pod template configuration
      template:
        # pod metadata. Name & Namespace is overwritten
        metadata:
        #      labels:
        #        myspeciallabel: myspecialvalue
        # Pod Specification
        spec:
          containers:
            - name: pigeon-project-server
              image: docker.io/tp8843/pigeon-project-server:amd64
              imagePullPolicy: Always
              # nodeSelector is a label that can be used to tell Kubernetes which host
              # OS to use. For Windows game servers uncomment the nodeSelector
              # definition below.
              # Details: https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-containers/#ensuring-os-specific-workloads-land-on-the-appropriate-container-host
              # nodeSelector:
              #   kubernetes.io/os: windows